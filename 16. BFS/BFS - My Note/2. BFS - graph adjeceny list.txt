    1     → level 0
   / \
  2   3   → level 1
  |   |
  4   5   → level 2


#algorithm : (BFS - Adjacency List)
-----------

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
    // Total number of nodes
    int n = 5;  // nodes: 1, 2, 3, 4, 5

    // Step 1: Build adjacency list (1-indexed)
    vector<vector<int>> adj(n + 1);  // index 0 unused; use 1 to 5

    // Add edges (undirected): 
    // 1 connected to 2 and 3
    // 2 connected to 4
    // 3 connected to 5
    adj[1].push_back(2);
    adj[1].push_back(3);

    adj[2].push_back(1);
    adj[2].push_back(4);

    adj[3].push_back(1);
    adj[3].push_back(5);

    adj[4].push_back(2);
    adj[5].push_back(3);

    // Step 2: Declare level array (1-indexed), initialize all to -1
    vector<int> level(n + 1, -1);
    // So level looks like:
    // index: 0  1  2  3  4  5
    //        ? -1 -1 -1 -1 -1   (we ignore index 0)

    // Step 3: Source node is 1
    int source = 1;

    // Step 4: Set source level to 0
    level[source] = 0;

    // Step 5: Declare queue
    queue<int> q;

    // Step 6: Push source
    q.push(source);  // q = [1]

    // Step 7: BFS loop
    while (!q.empty()) {
        // Step 8: Get current node
        int u = q.front();
        q.pop();

        // Step 9: Visit all neighbors of u
        for (int i = 0; i < adj[u].size(); i++) {
            int v = adj[u][i];  // neighbor node

            // Step 10: If not visited (level == -1)
            if (level[v] == -1) {
                // Step 11: Set level
                level[v] = level[u] + 1;

                // Step 12: Push to queue
                q.push(v);
            }
        }
    }

    // Output levels (optional)
    cout << "Node : Level\n";
    for (int i = 1; i <= n; i++) {
        cout << "  " << i << "   :   " << level[i] << "\n";
    }

    return 0;
}
